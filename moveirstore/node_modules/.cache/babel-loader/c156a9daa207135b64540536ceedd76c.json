{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _lib = require(\"../../lib\");\n/**\n * A row sub-component for Grid.\n */\n\n\nfunction GridRow(props) {\n  var centered = props.centered,\n      children = props.children,\n      className = props.className,\n      color = props.color,\n      columns = props.columns,\n      divided = props.divided,\n      only = props.only,\n      reversed = props.reversed,\n      stretched = props.stretched,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign;\n  var classes = (0, _classnames.default)(color, (0, _lib.useKeyOnly)(centered, 'centered'), (0, _lib.useKeyOnly)(divided, 'divided'), (0, _lib.useKeyOnly)(stretched, 'stretched'), (0, _lib.useMultipleProp)(only, 'only'), (0, _lib.useMultipleProp)(reversed, 'reversed'), (0, _lib.useTextAlignProp)(textAlign), (0, _lib.useVerticalAlignProp)(verticalAlign), (0, _lib.useWidthProp)(columns, 'column', true), 'row', className);\n  var rest = (0, _lib.getUnhandledProps)(GridRow, props);\n  var ElementType = (0, _lib.getElementType)(GridRow, props);\n  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {\n    className: classes\n  }), children);\n}\n\nGridRow.handledProps = [\"as\", \"centered\", \"children\", \"className\", \"color\", \"columns\", \"divided\", \"only\", \"reversed\", \"stretched\", \"textAlign\", \"verticalAlign\"];\nGridRow.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: _lib.customPropTypes.as,\n\n  /** A row can have its columns centered. */\n  centered: _propTypes.default.bool,\n\n  /** Primary content. */\n  children: _propTypes.default.node,\n\n  /** Additional classes. */\n  className: _propTypes.default.string,\n\n  /** A grid row can be colored. */\n  color: _propTypes.default.oneOf(_lib.SUI.COLORS),\n\n  /** Represents column count per line in Row. */\n  columns: _propTypes.default.oneOf((0, _toConsumableArray2.default)(_lib.SUI.WIDTHS).concat(['equal'])),\n\n  /** A row can have dividers between its columns. */\n  divided: _propTypes.default.bool,\n\n  /** A row can appear only for a specific device, or screen sizes. */\n  only: _lib.customPropTypes.multipleProp(_lib.SUI.VISIBILITY),\n\n  /** A row can specify that its columns should reverse order at different device sizes. */\n  reversed: _lib.customPropTypes.multipleProp(['computer', 'computer vertically', 'mobile', 'mobile vertically', 'tablet', 'tablet vertically']),\n\n  /** A row can stretch its contents to take up the entire column height. */\n  stretched: _propTypes.default.bool,\n\n  /** A row can specify its text alignment. */\n  textAlign: _propTypes.default.oneOf(_lib.SUI.TEXT_ALIGNMENTS),\n\n  /** A row can specify its vertical alignment to have all its columns vertically centered. */\n  verticalAlign: _propTypes.default.oneOf(_lib.SUI.VERTICAL_ALIGNMENTS)\n} : {};\nvar _default = GridRow;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}