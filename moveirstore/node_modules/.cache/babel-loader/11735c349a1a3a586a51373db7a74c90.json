{"ast":null,"code":"import _toConsumableArray from \"/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _objectSpread from \"/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/src/MasonryProvider.js\";\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport { CellMeasurer, CellMeasurerCache, createMasonryCellPositioner, Masonry } from \"react-virtualized\";\nimport ImageMeasurer from \"react-virtualized-image-measurer\"; //import {Grid} from \"./PopularFilms\";\n\nimport { Grid } from 'semantic-ui-react'; // Array of images with captions\n//const list = [{image: 'http://...', title: 'Foo'}];\n// We need to make sure images are loaded from scratch every time for this demo\n\nvar noCacheList = function noCacheList(list) {\n  return list.map(function (item, index) {\n    return {\n      title: index + \". \" + item.title,\n      image: item.image + (item.image ? \"?noCache=\" + Math.random() : \"\")\n    };\n  });\n};\n\nvar keyMapper = function keyMapper(item, index) {\n  return item.image || index;\n};\n\nvar columnWidth = 250;\nvar defaultHeight = 540;\nvar defaultWidth = columnWidth;\nvar defaultSpacer = 30;\nvar imageHeight = 380; // Default sizes help Masonry decide how many images to batch-measure\n\nvar cache = new CellMeasurerCache({\n  defaultHeight: defaultHeight,\n  defaultWidth: defaultWidth,\n  fixedWidth: true\n}); // Our masonry layout will use 3 columns with a 10px gutter between\n\nvar cellPositionerConfig = {\n  cellMeasurerCache: cache,\n  columnCount: 4,\n  columnWidth: columnWidth,\n  spacer: defaultSpacer\n};\nvar cellPositioner = createMasonryCellPositioner(cellPositionerConfig);\n\nvar MasonryComponent = function MasonryComponent(_ref) {\n  var itemsWithSizes = _ref.itemsWithSizes,\n      setRef = _ref.setRef;\n\n  var cellRenderer = function cellRenderer(_ref2) {\n    var index = _ref2.index,\n        key = _ref2.key,\n        parent = _ref2.parent,\n        style = _ref2.style;\n    var _itemsWithSizes$index = itemsWithSizes[index],\n        item = _itemsWithSizes$index.item,\n        size = _itemsWithSizes$index.size;\n    var height = imageHeight;\n    return React.createElement(CellMeasurer, {\n      cache: cache,\n      index: index,\n      key: key,\n      parent: parent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: _objectSpread({}, style, {\n        border: \"2px double grey\",\n        paddingLeft: \"1px\"\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: (console.log('https://image.tmdb.org/t/p/w500' + item.poster), 'https://image.tmdb.org/t/p/w500' + item.poster),\n      alt: 'https://cdn.sstatic.net/Sites/stackoverflow/img/404.svg',\n      style: {\n        height: height,\n        width: columnWidth - 5,\n        objectFit: \"fill\",\n        display: \"block\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, item.title)));\n  };\n\n  return React.createElement(Masonry, {\n    cellCount: itemsWithSizes.length,\n    cellMeasurerCache: cache,\n    cellPositioner: cellPositioner,\n    cellRenderer: cellRenderer,\n    height: defaultHeight * 5 + defaultSpacer * 4,\n    width: 1100,\n    keyMapper: keyMapper,\n    ref: setRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  });\n};\n\nvar Index =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Index, _React$Component);\n\n  function Index(props) {\n    var _this;\n\n    _classCallCheck(this, Index);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Index).call(this, props));\n    _this.masonryRef = null;\n\n    _this.shorten = function () {\n      cache.clearAll();\n      cellPositioner.reset(cellPositionerConfig);\n\n      _this.masonryRef.clearCellPositions();\n\n      _this.setState({\n        images: _toConsumableArray(_this.state.images.slice(1))\n      });\n    };\n\n    _this.setMasonry = function (node) {\n      return _this.masonryRef = node;\n    };\n\n    _this.state = {\n      images: noCacheList(_this.props.list)\n    };\n    return _this;\n  }\n\n  _createClass(Index, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Grid, {\n        padded: \"vertically\",\n        columns: 2,\n        verticalAlign: \"middle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }), React.createElement(Grid.Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, React.createElement(ImageMeasurer, {\n        items: this.state.images,\n        image: function image(item) {\n          return item.image;\n        },\n        keyMapper: keyMapper,\n        onError: function onError(error, item, src) {\n          console.error(\"Cannot load image\", src, \"for item\", item, \"error\", error);\n        },\n        defaultHeight: defaultHeight,\n        defaultWidth: defaultWidth,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, function (_ref3) {\n        var itemsWithSizes = _ref3.itemsWithSizes;\n        return React.createElement(MasonryComponent, {\n          setRef: _this2.setMasonry,\n          itemsWithSizes: itemsWithSizes,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145\n          },\n          __self: this\n        });\n      })), React.createElement(Grid.Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      if (nextProps.list != prevState.images) {\n        return _objectSpread({}, prevState, {\n          images: nextProps.list\n        });\n      }\n\n      return null;\n    }\n  }]);\n\n  return Index;\n}(React.Component);\n\nexport default Index;","map":{"version":3,"sources":["/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/src/MasonryProvider.js"],"names":["React","render","CellMeasurer","CellMeasurerCache","createMasonryCellPositioner","Masonry","ImageMeasurer","Grid","noCacheList","list","map","item","index","title","image","Math","random","keyMapper","columnWidth","defaultHeight","defaultWidth","defaultSpacer","imageHeight","cache","fixedWidth","cellPositionerConfig","cellMeasurerCache","columnCount","spacer","cellPositioner","MasonryComponent","itemsWithSizes","setRef","cellRenderer","key","parent","style","size","height","border","paddingLeft","console","log","poster","width","objectFit","display","length","Index","props","masonryRef","shorten","clearAll","reset","clearCellPositions","setState","images","state","slice","setMasonry","node","error","src","nextProps","prevState","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { render } from \"react-dom\";\nimport {\n    CellMeasurer,\n    CellMeasurerCache,\n    createMasonryCellPositioner,\n    Masonry\n} from \"react-virtualized\";\nimport ImageMeasurer from \"react-virtualized-image-measurer\";\n//import {Grid} from \"./PopularFilms\";\nimport {Grid} from 'semantic-ui-react'\n\n// Array of images with captions\n//const list = [{image: 'http://...', title: 'Foo'}];\n\n// We need to make sure images are loaded from scratch every time for this demo\nconst noCacheList = list => list.map((item, index) => ({\n    title: index + \". \" + item.title,\n    image: item.image + (item.image ? \"?noCache=\" + Math.random() : \"\")\n}));\n\nconst keyMapper = (item, index) => item.image || index;\n\nconst columnWidth = 250;\nconst defaultHeight = 540;\nconst defaultWidth = columnWidth;\nconst defaultSpacer = 30;\nconst imageHeight = 380;\n\n// Default sizes help Masonry decide how many images to batch-measure\nconst cache = new CellMeasurerCache({\n    defaultHeight,\n    defaultWidth,\n    fixedWidth: true\n});\n\n// Our masonry layout will use 3 columns with a 10px gutter between\nconst cellPositionerConfig = {\n    cellMeasurerCache: cache,\n    columnCount: 4,\n    columnWidth,\n    spacer: defaultSpacer\n};\n\nconst cellPositioner = createMasonryCellPositioner(cellPositionerConfig);\n\nconst MasonryComponent = ({ itemsWithSizes, setRef }) => {\n    const cellRenderer = ({ index, key, parent, style }) => {\n        const { item, size } = itemsWithSizes[index];\n        const height = imageHeight;\n\n        return (\n            <CellMeasurer\n                cache={cache}\n                index={index}\n                key={key}\n                parent={parent} >\n            <div style={{...style, ...{border: \"2px double grey\", paddingLeft: \"1px\", }}}>\n        {(\n        <img\n            src={(console.log('https://image.tmdb.org/t/p/w500'+item.poster), 'https://image.tmdb.org/t/p/w500'+item.poster)}\n            alt={'https://cdn.sstatic.net/Sites/stackoverflow/img/404.svg'}\n            style={{\n            height: height,\n                width: columnWidth - 5,\n                objectFit: \"fill\",\n                display: \"block\"\n        }}\n            />\n        )}\n                <div>{item.title}</div>\n    </div>\n        </CellMeasurer>\n    );\n    };\n\n    return (\n        <Masonry\n    cellCount={itemsWithSizes.length}\n    cellMeasurerCache={cache}\n    cellPositioner={cellPositioner}\n    cellRenderer={cellRenderer}\n    height={defaultHeight * 5 + defaultSpacer * 4}\n    width={1100}\n    keyMapper={keyMapper}\n    ref={setRef}\n    />\n);\n};\n\nclass Index extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = { images: noCacheList(this.props.list)};\n    }\n\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        if (nextProps.list != prevState.images) {\n            return {...prevState, images: nextProps.list}\n        }\n\n        return null;\n    }\n\n    masonryRef = null;\n\n    // this shows how to significantly change the input array, if items will be only appended this recalculation is not needed\n    shorten = () => {\n        cache.clearAll();\n        cellPositioner.reset(cellPositionerConfig);\n        this.masonryRef.clearCellPositions();\n        this.setState({ images: [...this.state.images.slice(1)] });\n    };\n\n    setMasonry = node => (this.masonryRef = node);\n\n    render() {\n        return (\n                < Grid padded='vertically'\n                       columns = {2}\n                       verticalAlign = 'middle' >\n                    <Grid.Column/>\n                    < Grid.Column >\n                        <ImageMeasurer\n                            items={this.state.images}\n                            image={item => item.image}\n                            keyMapper={keyMapper}\n                            onError={(error, item, src) => {\n                                console.error(\n                                    \"Cannot load image\",\n                                    src,\n                                    \"for item\",\n                                    item,\n                                    \"error\",\n                                    error\n                                );\n                            }}\n                            defaultHeight={defaultHeight}\n                            defaultWidth={defaultWidth}\n                        >\n                            {({ itemsWithSizes }) => (\n                                <MasonryComponent\n                                    setRef={this.setMasonry}\n                                    itemsWithSizes={itemsWithSizes}\n                                />\n                            )}\n                        </ImageMeasurer>\n                        < /Grid.Column>\n                        <Grid.Column/>\n                        < /Grid>\n                        );\n    }\n}\n\nexport default Index;"]},"metadata":{},"sourceType":"module"}