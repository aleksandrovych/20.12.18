{"ast":null,"code":"import _objectSpread from \"/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/src/MasonryProvider.js\";\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport { CellMeasurer, CellMeasurerCache, createMasonryCellPositioner, Masonry } from \"react-virtualized\";\nimport ImageMeasurer from \"react-virtualized-image-measurer\"; // Array of images with captions\n//const list = [{image: 'http://...', title: 'Foo'}];\n// We need to make sure images are loaded from scratch every time for this demo\n\nvar noCacheList = list.map(function (item) {\n  return _objectSpread({}, item, {\n    image: item.image + \"?noCache=\" + Math.random()\n  });\n});\nvar columnWidth = 200;\nvar defaultHeight = 250;\nvar defaultWidth = columnWidth; // Default sizes help Masonry decide how many images to batch-measure\n\nvar cache = new CellMeasurerCache({\n  defaultHeight: defaultHeight,\n  defaultWidth: defaultWidth,\n  fixedWidth: true\n}); // Our masonry layout will use 3 columns with a 10px gutter between\n\nvar cellPositioner = createMasonryCellPositioner({\n  cellMeasurerCache: cache,\n  columnCount: 3,\n  columnWidth: columnWidth,\n  spacer: 10\n});\n\nvar MasonryComponent = function MasonryComponent(_ref) {\n  var itemsWithSizes = _ref.itemsWithSizes;\n\n  function cellRenderer(_ref2) {\n    var index = _ref2.index,\n        key = _ref2.key,\n        parent = _ref2.parent,\n        style = _ref2.style;\n    var _itemsWithSizes$index = itemsWithSizes[index],\n        item = _itemsWithSizes$index.item,\n        size = _itemsWithSizes$index.size;\n    var height = columnWidth * (size.height / size.width) || defaultHeight;\n    return React.createElement(CellMeasurer, {\n      cache: cache,\n      index: index,\n      key: key,\n      parent: parent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: style,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: item.image,\n      alt: item.title,\n      style: {\n        height: height,\n        width: columnWidth\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, item.title)));\n  }\n\n  return React.createElement(Masonry, {\n    cellCount: itemsWithSizes.length,\n    cellMeasurerCache: cache,\n    cellPositioner: cellPositioner,\n    cellRenderer: cellRenderer,\n    height: 600,\n    width: 800,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  });\n}; // Render your grid\n\n\nrender(React.createElement(ImageMeasurer, {\n  items: noCacheList,\n  image: function image(item) {\n    return item.image;\n  },\n  defaultHeight: defaultHeight,\n  defaultWidth: defaultWidth,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 76\n  },\n  __self: this\n}, function (_ref3) {\n  var itemsWithSizes = _ref3.itemsWithSizes;\n  return React.createElement(MasonryComponent, {\n    itemsWithSizes: itemsWithSizes,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  });\n}), document.getElementById(\"root\"));\nexport default MasonryComponent;","map":{"version":3,"sources":["/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/src/MasonryProvider.js"],"names":["React","render","CellMeasurer","CellMeasurerCache","createMasonryCellPositioner","Masonry","ImageMeasurer","noCacheList","list","map","item","image","Math","random","columnWidth","defaultHeight","defaultWidth","cache","fixedWidth","cellPositioner","cellMeasurerCache","columnCount","spacer","MasonryComponent","itemsWithSizes","cellRenderer","index","key","parent","style","size","height","width","title","length","document","getElementById"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SACIC,YADJ,EAEIC,iBAFJ,EAGIC,2BAHJ,EAIIC,OAJJ,QAKO,mBALP;AAMA,OAAOC,aAAP,MAA0B,kCAA1B,C,CAEA;AACA;AAEA;;AACA,IAAMC,WAAW,GAAGC,IAAI,CAACC,GAAL,CAAS,UAAAC,IAAI;AAAA,2BAC1BA,IAD0B;AAE7BC,IAAAA,KAAK,EAAED,IAAI,CAACC,KAAL,GAAa,WAAb,GAA2BC,IAAI,CAACC,MAAL;AAFL;AAAA,CAAb,CAApB;AAKA,IAAMC,WAAW,GAAG,GAApB;AACA,IAAMC,aAAa,GAAG,GAAtB;AACA,IAAMC,YAAY,GAAGF,WAArB,C,CAEA;;AACA,IAAMG,KAAK,GAAG,IAAId,iBAAJ,CAAsB;AAChCY,EAAAA,aAAa,EAAbA,aADgC;AAEhCC,EAAAA,YAAY,EAAZA,YAFgC;AAGhCE,EAAAA,UAAU,EAAE;AAHoB,CAAtB,CAAd,C,CAMA;;AACA,IAAMC,cAAc,GAAGf,2BAA2B,CAAC;AAC/CgB,EAAAA,iBAAiB,EAAEH,KAD4B;AAE/CI,EAAAA,WAAW,EAAE,CAFkC;AAG/CP,EAAAA,WAAW,EAAXA,WAH+C;AAI/CQ,EAAAA,MAAM,EAAE;AAJuC,CAAD,CAAlD;;AAOA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,OAAwB;AAAA,MAArBC,cAAqB,QAArBA,cAAqB;;AAE7C,WAASC,YAAT,QAAqD;AAAA,QAA7BC,KAA6B,SAA7BA,KAA6B;AAAA,QAAtBC,GAAsB,SAAtBA,GAAsB;AAAA,QAAjBC,MAAiB,SAAjBA,MAAiB;AAAA,QAATC,KAAS,SAATA,KAAS;AAAA,gCAC1BL,cAAc,CAACE,KAAD,CADY;AAAA,QACzChB,IADyC,yBACzCA,IADyC;AAAA,QACnCoB,IADmC,yBACnCA,IADmC;AAEjD,QAAMC,MAAM,GAAGjB,WAAW,IAAIgB,IAAI,CAACC,MAAL,GAAcD,IAAI,CAACE,KAAvB,CAAX,IAA4CjB,aAA3D;AAEA,WACI,oBAAC,YAAD;AAAc,MAAA,KAAK,EAAEE,KAArB;AAA4B,MAAA,KAAK,EAAES,KAAnC;AAA0C,MAAA,GAAG,EAAEC,GAA/C;AAAoD,MAAA,MAAM,EAAEC,MAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAK,MAAA,KAAK,EAAEC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AACJ,MAAA,GAAG,EAAEnB,IAAI,CAACC,KADN;AAEJ,MAAA,GAAG,EAAED,IAAI,CAACuB,KAFN;AAGJ,MAAA,KAAK,EAAE;AACHF,QAAAA,MAAM,EAAEA,MADL;AAECC,QAAAA,KAAK,EAAElB;AAFR,OAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,EASJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKJ,IAAI,CAACuB,KAAV,CATI,CADA,CADJ;AAeH;;AAED,SACI,oBAAC,OAAD;AACJ,IAAA,SAAS,EAAET,cAAc,CAACU,MADtB;AAEJ,IAAA,iBAAiB,EAAEjB,KAFf;AAGJ,IAAA,cAAc,EAAEE,cAHZ;AAIJ,IAAA,YAAY,EAAEM,YAJV;AAKJ,IAAA,MAAM,EAAE,GALJ;AAMJ,IAAA,KAAK,EAAE,GANH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAUH,CAjCD,C,CAmCA;;;AACAxB,MAAM,CACN,oBAAC,aAAD;AACA,EAAA,KAAK,EAAEM,WADP;AAEA,EAAA,KAAK,EAAE,eAAAG,IAAI;AAAA,WAAIA,IAAI,CAACC,KAAT;AAAA,GAFX;AAGA,EAAA,aAAa,EAAEI,aAHf;AAIA,EAAA,YAAY,EAAEC,YAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAMK;AAAA,MAAGQ,cAAH,SAAGA,cAAH;AAAA,SACL,oBAAC,gBAAD;AAAkB,IAAA,cAAc,EAAEA,cAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADK;AAAA,CANL,CADM,EAWNW,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAXM,CAAN;AAcA,eAAgBb,gBAAhB","sourcesContent":["import React from \"react\";\nimport { render } from \"react-dom\";\nimport {\n    CellMeasurer,\n    CellMeasurerCache,\n    createMasonryCellPositioner,\n    Masonry\n} from \"react-virtualized\";\nimport ImageMeasurer from \"react-virtualized-image-measurer\";\n\n// Array of images with captions\n//const list = [{image: 'http://...', title: 'Foo'}];\n\n// We need to make sure images are loaded from scratch every time for this demo\nconst noCacheList = list.map(item => ({\n    ...item,\n    image: item.image + \"?noCache=\" + Math.random()\n}));\n\nconst columnWidth = 200;\nconst defaultHeight = 250;\nconst defaultWidth = columnWidth;\n\n// Default sizes help Masonry decide how many images to batch-measure\nconst cache = new CellMeasurerCache({\n    defaultHeight,\n    defaultWidth,\n    fixedWidth: true\n});\n\n// Our masonry layout will use 3 columns with a 10px gutter between\nconst cellPositioner = createMasonryCellPositioner({\n    cellMeasurerCache: cache,\n    columnCount: 3,\n    columnWidth,\n    spacer: 10\n});\n\nconst MasonryComponent = ({ itemsWithSizes }) => {\n\n    function cellRenderer({ index, key, parent, style }) {\n        const { item, size } = itemsWithSizes[index];\n        const height = columnWidth * (size.height / size.width) || defaultHeight;\n\n        return (\n            <CellMeasurer cache={cache} index={index} key={key} parent={parent}>\n            <div style={style}>\n            <img\n        src={item.image}\n        alt={item.title}\n        style={{\n            height: height,\n                width: columnWidth\n        }}\n        />\n        <h4>{item.title}</h4>\n        </div>\n        </CellMeasurer>\n    );\n    }\n\n    return (\n        <Masonry\n    cellCount={itemsWithSizes.length}\n    cellMeasurerCache={cache}\n    cellPositioner={cellPositioner}\n    cellRenderer={cellRenderer}\n    height={600}\n    width={800}\n    />\n);\n};\n\n// Render your grid\nrender(\n<ImageMeasurer\nitems={noCacheList}\nimage={item => item.image}\ndefaultHeight={defaultHeight}\ndefaultWidth={defaultWidth}\n    >\n    {({ itemsWithSizes }) => (\n<MasonryComponent itemsWithSizes={itemsWithSizes} />\n)}\n</ImageMeasurer>,\ndocument.getElementById(\"root\")\n);\n\nexport default  MasonryComponent;"]},"metadata":{},"sourceType":"module"}