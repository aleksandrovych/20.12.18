{"ast":null,"code":"import _toConsumableArray from \"/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _objectSpread from \"/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/src/MasonryProvider.js\";\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport { CellMeasurer, CellMeasurerCache, createMasonryCellPositioner, Masonry } from \"react-virtualized\";\nimport ImageMeasurer from \"react-virtualized-image-measurer\";\nimport { Grid, Label, Icon, Container } from 'semantic-ui-react'; // Array of images with captions\n//const list = [{image: 'http://...', title: 'Foo'}];\n// We need to make sure images are loaded from scratch every time for this demo\n\nvar noCacheList = function noCacheList(list) {\n  return list.map(function (item, index) {\n    return {\n      title: index + \". \" + item.title,\n      image: item.image + (item.image ? \"?noCache=\" + Math.random() : \"\")\n    };\n  });\n};\n\nvar keyMapper = function keyMapper(item, index) {\n  return item.image || index;\n};\n\nvar columnWidth = 250;\nvar defaultHeight = 700;\nvar defaultWidth = columnWidth;\nvar defaultSpacer = 30;\nvar imageHeight = 380; // Default sizes help Masonry decide how many images to batch-measure\n\nvar cache = new CellMeasurerCache({\n  defaultHeight: defaultHeight,\n  defaultWidth: defaultWidth,\n  fixedWidth: true\n}); // Our masonry layout will use 3 columns with a 10px gutter between\n\nvar cellPositionerConfig = {\n  cellMeasurerCache: cache,\n  columnCount: 4,\n  columnWidth: columnWidth,\n  spacer: defaultSpacer\n};\nvar cellPositioner = createMasonryCellPositioner(cellPositionerConfig);\n\nvar MasonryComponent = function MasonryComponent(_ref) {\n  var itemsWithSizes = _ref.itemsWithSizes,\n      setRef = _ref.setRef;\n\n  var cellRenderer = function cellRenderer(_ref2) {\n    var index = _ref2.index,\n        key = _ref2.key,\n        parent = _ref2.parent,\n        style = _ref2.style;\n    var _itemsWithSizes$index = itemsWithSizes[index],\n        item = _itemsWithSizes$index.item,\n        size = _itemsWithSizes$index.size;\n    var height = imageHeight;\n    return React.createElement(CellMeasurer, {\n      cache: cache,\n      index: index,\n      key: key,\n      parent: parent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: _objectSpread({}, style, {\n        border: \"2px double grey\",\n        height: defaultHeight\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: (console.log('https://image.tmdb.org/t/p/w500' + item.poster), 'https://image.tmdb.org/t/p/w500' + item.poster),\n      alt: 'https://cdn.sstatic.net/Sites/stackoverflow/img/404.svg',\n      style: {\n        height: height,\n        width: columnWidth - 4,\n        objectFit: \"fill\",\n        display: \"block\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        maxHeight: \"20px\",\n        overflow: \"hidden\",\n        textOverflow: \"ellipsis\",\n        whiteSpace: \"nowrap\",\n        paddingLeft: \"5px\",\n        paddingRight: \"5px\",\n        marginTop: \"5px\",\n        marginBottom: \"5px\",\n        font: \"bold 130% serif\",\n        color: \"#008080\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, item.title), React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(Label, {\n      as: \"a\",\n      tag: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"Mail\"))));\n  };\n\n  return React.createElement(Masonry, {\n    cellCount: itemsWithSizes.length,\n    cellMeasurerCache: cache,\n    cellPositioner: cellPositioner,\n    cellRenderer: cellRenderer,\n    height: 2400,\n    width: 1100,\n    keyMapper: keyMapper,\n    ref: setRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  });\n};\n\nvar Index =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Index, _React$Component);\n\n  function Index(props) {\n    var _this;\n\n    _classCallCheck(this, Index);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Index).call(this, props));\n    _this.masonryRef = null;\n\n    _this.shorten = function () {\n      cache.clearAll();\n      cellPositioner.reset(cellPositionerConfig);\n\n      _this.masonryRef.clearCellPositions();\n\n      _this.setState({\n        images: _toConsumableArray(_this.state.images.slice(1))\n      });\n    };\n\n    _this.setMasonry = function (node) {\n      return _this.masonryRef = node;\n    };\n\n    _this.state = {\n      images: noCacheList(_this.props.list)\n    };\n    return _this;\n  }\n\n  _createClass(Index, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(ImageMeasurer, {\n        items: this.state.images,\n        image: function image(item) {\n          return item.image;\n        },\n        keyMapper: keyMapper,\n        onError: function onError(error, item, src) {\n          console.error(\"Cannot load image\", src, \"for item\", item, \"error\", error);\n        },\n        defaultHeight: defaultHeight,\n        defaultWidth: defaultWidth,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, function (_ref3) {\n        var itemsWithSizes = _ref3.itemsWithSizes;\n        return React.createElement(MasonryComponent, {\n          setRef: _this2.setMasonry,\n          itemsWithSizes: itemsWithSizes,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144\n          },\n          __self: this\n        });\n      });\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      if (nextProps.list != prevState.images) {\n        return _objectSpread({}, prevState, {\n          images: nextProps.list\n        });\n      }\n\n      return null;\n    }\n  }]);\n\n  return Index;\n}(React.Component);\n\nexport default Index;","map":{"version":3,"sources":["/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/src/MasonryProvider.js"],"names":["React","render","CellMeasurer","CellMeasurerCache","createMasonryCellPositioner","Masonry","ImageMeasurer","Grid","Label","Icon","Container","noCacheList","list","map","item","index","title","image","Math","random","keyMapper","columnWidth","defaultHeight","defaultWidth","defaultSpacer","imageHeight","cache","fixedWidth","cellPositionerConfig","cellMeasurerCache","columnCount","spacer","cellPositioner","MasonryComponent","itemsWithSizes","setRef","cellRenderer","key","parent","style","size","height","border","console","log","poster","width","objectFit","display","maxHeight","overflow","textOverflow","whiteSpace","paddingLeft","paddingRight","marginTop","marginBottom","font","color","length","Index","props","masonryRef","shorten","clearAll","reset","clearCellPositions","setState","images","state","slice","setMasonry","node","error","src","nextProps","prevState","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { render } from \"react-dom\";\nimport {\n    CellMeasurer,\n    CellMeasurerCache,\n    createMasonryCellPositioner,\n    Masonry\n} from \"react-virtualized\";\nimport ImageMeasurer from \"react-virtualized-image-measurer\";\nimport {Grid, Label, Icon, Container} from 'semantic-ui-react'\n\n// Array of images with captions\n//const list = [{image: 'http://...', title: 'Foo'}];\n\n// We need to make sure images are loaded from scratch every time for this demo\nconst noCacheList = list => list.map((item, index) => ({\n    title: index + \". \" + item.title,\n    image: item.image + (item.image ? \"?noCache=\" + Math.random() : \"\")\n}));\n\nconst keyMapper = (item, index) => item.image || index;\n\nconst columnWidth = 250;\nconst defaultHeight = 700;\nconst defaultWidth = columnWidth;\nconst defaultSpacer = 30;\nconst imageHeight = 380;\n\n// Default sizes help Masonry decide how many images to batch-measure\nconst cache = new CellMeasurerCache({\n    defaultHeight,\n    defaultWidth,\n    fixedWidth: true\n});\n\n// Our masonry layout will use 3 columns with a 10px gutter between\nconst cellPositionerConfig = {\n    cellMeasurerCache: cache,\n    columnCount: 4,\n    columnWidth,\n    spacer: defaultSpacer\n};\n\nconst cellPositioner = createMasonryCellPositioner(cellPositionerConfig);\n\nconst MasonryComponent = ({ itemsWithSizes, setRef }) => {\n    const cellRenderer = ({ index, key, parent, style }) => {\n        const { item, size } = itemsWithSizes[index];\n        const height = imageHeight;\n\n        return (\n            <CellMeasurer\n                cache={cache}\n                index={index}\n                key={key}\n                parent={parent} >\n            <div style={{...style, ...{border: \"2px double grey\", height: defaultHeight}}}>\n        {(\n        <img\n            src={(console.log('https://image.tmdb.org/t/p/w500'+item.poster), 'https://image.tmdb.org/t/p/w500'+item.poster)}\n            alt={'https://cdn.sstatic.net/Sites/stackoverflow/img/404.svg'}\n            style={{\n            height: height,\n                width: columnWidth - 4,\n                objectFit: \"fill\",\n                display: \"block\"\n        }}\n            />\n        )}\n        <div style={{maxHeight: \"20px\", overflow: \"hidden\", textOverflow: \"ellipsis\", whiteSpace: \"nowrap\", paddingLeft: \"5px\", paddingRight: \"5px\", marginTop: \"5px\", marginBottom: \"5px\", font: \"bold 130% serif\", color: \"#008080\"}}>{item.title}</div>\n                <Container>\n                <Label as='a' tag>\n                    Mail\n                </Label>\n                    </Container>\n    </div>\n        </CellMeasurer>\n    );\n    };\n\n    return (\n        <Masonry\n    cellCount={itemsWithSizes.length}\n    cellMeasurerCache={cache}\n    cellPositioner={cellPositioner}\n    cellRenderer={cellRenderer}\n    height={2400}\n    width={1100}\n    keyMapper={keyMapper}\n    ref={setRef}\n    />\n);\n};\n\nclass Index extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = { images: noCacheList(this.props.list)};\n    }\n\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        if (nextProps.list != prevState.images) {\n            return {...prevState, images: nextProps.list}\n        }\n\n        return null;\n    }\n\n    masonryRef = null;\n\n    // this shows how to significantly change the input array, if items will be only appended this recalculation is not needed\n    shorten = () => {\n        cache.clearAll();\n        cellPositioner.reset(cellPositionerConfig);\n        this.masonryRef.clearCellPositions();\n        this.setState({ images: [...this.state.images.slice(1)] });\n    };\n\n    setMasonry = node => (this.masonryRef = node);\n\n    render() {\n        return (\n                        <ImageMeasurer\n                            items={this.state.images}\n                            image={item => item.image}\n                            keyMapper={keyMapper}\n                            onError={(error, item, src) => {\n                                console.error(\n                                    \"Cannot load image\",\n                                    src,\n                                    \"for item\",\n                                    item,\n                                    \"error\",\n                                    error\n                                );\n                            }}\n                            defaultHeight={defaultHeight}\n                            defaultWidth={defaultWidth}\n                        >\n                            {({ itemsWithSizes }) => (\n                                <MasonryComponent\n                                    setRef={this.setMasonry}\n                                    itemsWithSizes={itemsWithSizes}\n                                />\n                            )}\n                        </ImageMeasurer>\n                        );\n    }\n}\n\nexport default Index;"]},"metadata":{},"sourceType":"module"}