{"ast":null,"code":"import _classCallCheck from \"/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _objectSpread from \"/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/src/MasonryProvider.js\";\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport { CellMeasurer, CellMeasurerCache, createMasonryCellPositioner, Masonry } from \"react-virtualized\";\nimport ImageMeasurer from \"react-virtualized-image-measurer\";\nimport { Grid, Label, Icon, Container, Progress } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom'; // Array of images with captions\n//const list = [{image: 'http://...', title: 'Foo'}];\n// We need to make sure images are loaded from scratch every time for this demo\n\nvar noCacheList = function noCacheList(list) {\n  return list.map(function (item, index) {\n    return {\n      title: index + \". \" + item.title,\n      image: item.image + (item.image ? \"?noCache=\" + Math.random() : \"\")\n    };\n  });\n};\n\nvar keyMapper = function keyMapper(item, index) {\n  return item.image || index;\n};\n\nvar columnWidth = 250;\nvar defaultHeight = 700;\nvar defaultWidth = columnWidth;\nvar defaultSpacer = 30;\nvar imageHeight = 380; // Default sizes help Masonry decide how many images to batch-measure\n\nvar cache = new CellMeasurerCache({\n  imageHeight: imageHeight,\n  defaultWidth: defaultWidth,\n  fixedWidth: true\n});\n\nvar createCellPositionerConfig = function createCellPositionerConfig(width) {\n  return {\n    cellMeasurerCache: cache,\n    columnCount: width < 1055 ? 3 : 4,\n    columnWidth: columnWidth,\n    spacer: defaultSpacer\n  };\n};\n\nvar createMasonryCellPositionerProxy = function createMasonryCellPositionerProxy(width) {\n  console.log('width1: ', width);\n  return createMasonryCellPositioner(createCellPositionerConfig(width));\n};\n\nvar workWithText = function workWithText(text) {\n  if (text === undefined) {\n    return \"\";\n  }\n\n  if (text === \"Science Fiction\") {\n    return \"Sci-Fy\";\n  }\n\n  if (text.length > 5) {\n    return text.slice(0, 5);\n  }\n\n  return text;\n};\n\nvar MasonryComponent = function MasonryComponent(_ref) {\n  var itemsWithSizes = _ref.itemsWithSizes,\n      setRef = _ref.setRef,\n      width = _ref.width;\n  var cellPositioner = createMasonryCellPositionerProxy(width);\n\n  var cellRenderer = function cellRenderer(_ref2) {\n    var index = _ref2.index,\n        key = _ref2.key,\n        parent = _ref2.parent,\n        style = _ref2.style;\n    var _itemsWithSizes$index = itemsWithSizes[index],\n        item = _itemsWithSizes$index.item,\n        size = _itemsWithSizes$index.size;\n    var height = imageHeight;\n    return React.createElement(CellMeasurer, {\n      cache: cache,\n      index: index,\n      key: item.id,\n      parent: parent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: _objectSpread({}, style, {\n        border: \"2px double grey\",\n        height: defaultHeight - 216\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/movie/\" + item.id\n      /*target={type === 'search'? '_blank' : null}*/\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: item !== null && item.poster !== null ? 'https://image.tmdb.org/t/p/w500' + item.poster : 'https://cdn.sstatic.net/Sites/stackoverflow/img/404.svg',\n      alt: 'No films',\n      style: {\n        height: height,\n        width: columnWidth - 4,\n        objectFit: \"fill\",\n        display: \"block\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        maxHeight: \"20px\",\n        overflow: \"hidden\",\n        textOverflow: \"ellipsis\",\n        whiteSpace: \"nowrap\",\n        paddingLeft: \"10px\",\n        paddingRight: \"10px\",\n        marginTop: \"5px\",\n        marginBottom: \"10px\",\n        font: \"bold 130% serif\",\n        color: \"#008080\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, item.title), React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        paddingLeft: \"10px\",\n        marginBottom: \"10px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, item.genres[0] != undefined && React.createElement(Label, {\n      size: \"tiny\",\n      as: \"a\",\n      tag: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, workWithText(item.genres[0])), item.genres[1] != undefined && React.createElement(Label, {\n      size: \"tiny\",\n      as: \"a\",\n      color: \"red\",\n      tag: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, workWithText(item.genres[1])), item.genres[2] != undefined && React.createElement(Label, {\n      size: \"tiny\",\n      as: \"a\",\n      color: \"teal\",\n      tag: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, workWithText(item.genres[2])))), React.createElement(\"div\", {\n      style: {\n        paddingLeft: \"10px\",\n        paddingRight: \"10px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(Progress, {\n      color: item.rating < 3.0 ? \"red\" : item.rating < 6.0 ? \"yellow\" : \"green\",\n      percent: item.rating * 10,\n      size: \"small\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"Rating\")))));\n  };\n\n  return React.createElement(Masonry, {\n    cellCount: itemsWithSizes.length,\n    cellMeasurerCache: cache,\n    cellPositioner: cellPositioner,\n    cellRenderer: cellRenderer,\n    height: 2600,\n    width: width + 50,\n    keyMapper: keyMapper,\n    ref: setRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  });\n};\n\nvar Index =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Index, _React$Component);\n\n  function Index(props) {\n    var _this;\n\n    _classCallCheck(this, Index);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Index).call(this, props));\n    _this.masonryRef = null;\n\n    _this.setMasonry = function (node) {\n      return _this.masonryRef = node;\n    };\n\n    if (props.list != null && props.list.length > 0) {\n      cache.clearAll(); // cellPositioner.reset(cellPositionerConfig);\n\n      if (_this.masonryRef != null) {\n        _this.masonryRef.clearCellPositions();\n      }\n\n      _this.state = {\n        images: noCacheList(props.list)\n      };\n    }\n\n    return _this;\n  }\n\n  _createClass(Index, [{\n    key: \"componentWillUpdate\",\n    value: function componentWillUpdate(nextProps, nextState, nextContext) {\n      cache.clearAll(); // cellPositioner.reset(cellPositionerConfig);\n\n      this.masonryRef.clearCellPositions();\n      this.state = {\n        images: noCacheList(nextProps.list)\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(ImageMeasurer, {\n        items: this.props.list,\n        image: function image(item) {\n          return item.image;\n        },\n        keyMapper: keyMapper,\n        onError: function onError(error, item, src) {\n          console.error(\"Cannot load image\", src, \"for item\", item, \"error\", error);\n        },\n        defaultHeight: defaultHeight,\n        defaultWidth: defaultWidth,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, function (_ref3) {\n        var itemsWithSizes = _ref3.itemsWithSizes,\n            sizes = _ref3.sizes;\n        return React.createElement(MasonryComponent, {\n          width: _this2.props.width,\n          setRef: _this2.setMasonry,\n          itemsWithSizes: itemsWithSizes,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 182\n          },\n          __self: this\n        });\n      });\n    }\n  }]);\n\n  return Index;\n}(React.Component);\n\nexport default Index;","map":{"version":3,"sources":["/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/src/MasonryProvider.js"],"names":["React","render","CellMeasurer","CellMeasurerCache","createMasonryCellPositioner","Masonry","ImageMeasurer","Grid","Label","Icon","Container","Progress","Link","noCacheList","list","map","item","index","title","image","Math","random","keyMapper","columnWidth","defaultHeight","defaultWidth","defaultSpacer","imageHeight","cache","fixedWidth","createCellPositionerConfig","width","cellMeasurerCache","columnCount","spacer","createMasonryCellPositionerProxy","console","log","workWithText","text","undefined","length","slice","MasonryComponent","itemsWithSizes","setRef","cellPositioner","cellRenderer","key","parent","style","size","height","id","border","poster","objectFit","display","maxHeight","overflow","textOverflow","whiteSpace","paddingLeft","paddingRight","marginTop","marginBottom","font","color","genres","rating","Index","props","masonryRef","setMasonry","node","clearAll","clearCellPositions","state","images","nextProps","nextState","nextContext","error","src","sizes","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { render } from \"react-dom\";\nimport {\n    CellMeasurer,\n    CellMeasurerCache,\n    createMasonryCellPositioner,\n    Masonry\n} from \"react-virtualized\";\nimport ImageMeasurer from \"react-virtualized-image-measurer\";\nimport {Grid, Label, Icon, Container, Progress} from 'semantic-ui-react'\n\nimport {Link} from 'react-router-dom'\n\n// Array of images with captions\n//const list = [{image: 'http://...', title: 'Foo'}];\n\n// We need to make sure images are loaded from scratch every time for this demo\nconst noCacheList = list => list.map((item, index) => ({\n    title: index + \". \" + item.title,\n    image: item.image + (item.image ? \"?noCache=\" + Math.random() : \"\")\n}));\n\nconst keyMapper = (item, index) => item.image || index;\n\nconst columnWidth = 250;\nconst defaultHeight = 700;\nconst defaultWidth = columnWidth;\nconst defaultSpacer = 30;\nconst imageHeight = 380;\n\n// Default sizes help Masonry decide how many images to batch-measure\nconst cache = new CellMeasurerCache({\n    imageHeight,\n    defaultWidth,\n    fixedWidth: true\n});\n\nconst createCellPositionerConfig = width => {\n    return {\n        cellMeasurerCache: cache,\n        columnCount: width < 1055 ? 3 : 4,\n        columnWidth,\n        spacer: defaultSpacer\n    }\n}\n\nconst createMasonryCellPositionerProxy = (width) => {\n    console.log('width1: ', width)\n    return createMasonryCellPositioner(createCellPositionerConfig(width))\n}\n\nconst workWithText = (text) => {\n    if (text === undefined) {\n        return \"\"\n    }\n\n    if (text === \"Science Fiction\") {\n        return \"Sci-Fy\";\n    }\n\n    if (text.length > 5) {\n        return text.slice(0, 5)\n    }\n\n    return text\n}\n\nconst MasonryComponent = ({ itemsWithSizes, setRef, width }) => {\n\n    const cellPositioner = createMasonryCellPositionerProxy(width);\n\n\n    const cellRenderer = ({ index, key, parent, style }) => {\n        const { item, size } = itemsWithSizes[index];\n        const height = imageHeight;\n        return (\n            <CellMeasurer\n                cache={cache}\n                index={index}\n                key={item.id}\n                parent={parent} >\n            <div style={{...style, ...{border: \"2px double grey\", height: defaultHeight-216}}}>\n                <Link to={\"/movie/\"+item.id} /*target={type === 'search'? '_blank' : null}*/>\n\n                {(\n        <img\n            src={item !== null && item.poster !== null  ? 'https://image.tmdb.org/t/p/w500'+item.poster : 'https://cdn.sstatic.net/Sites/stackoverflow/img/404.svg'}\n            alt={'No films'}\n            style={{\n            height: height,\n                width: columnWidth - 4,\n                objectFit: \"fill\",\n                display: \"block\"\n        }}\n            />\n        )}\n\n        <div style={{maxHeight: \"20px\", overflow: \"hidden\", textOverflow: \"ellipsis\", whiteSpace: \"nowrap\", paddingLeft: \"10px\", paddingRight: \"10px\", marginTop: \"5px\", marginBottom: \"10px\", font: \"bold 130% serif\", color: \"#008080\"}}>{item.title}</div>\n                <Container>\n                    <div style={{paddingLeft: \"10px\", marginBottom: \"10px\",}}>\n                        {  item.genres[0] != undefined && <Label size=\"tiny\" as='a' tag>{workWithText(item.genres[0])}</Label>}\n                        {  item.genres[1] != undefined && <Label size=\"tiny\" as='a' color='red' tag>{workWithText(item.genres[1])}</Label>}\n                        {  item.genres[2] != undefined && <Label size=\"tiny\" as='a' color='teal' tag>{workWithText(item.genres[2])}</Label>}\n                    </div>\n                </Container>\n                <div style={{paddingLeft: \"10px\", paddingRight: \"10px\",}}>\n                <Progress color={(item.rating < 3.0 ? \"red\" : (item.rating < 6.0 ? \"yellow\" : \"green\"))} percent={item.rating * 10} size='small'>\n                    Rating\n                </Progress>\n                </div>\n                </Link>\n\n    </div>\n        </CellMeasurer>\n    );\n    };\n\n    return (\n        <Masonry\n    cellCount={itemsWithSizes.length}\n    cellMeasurerCache={cache}\n    cellPositioner={cellPositioner}\n    cellRenderer={cellRenderer}\n    height={2600}\n    width={width+50}\n    keyMapper={keyMapper}\n    ref={setRef}\n    />\n);\n};\n\nclass Index extends React.Component {\n\n    masonryRef = null;\n\n    constructor(props) {\n        super(props)\n\n        if (props.list != null && props.list.length > 0) {\n            cache.clearAll();\n           // cellPositioner.reset(cellPositionerConfig);\n\n            if (this.masonryRef != null) {\n                this.masonryRef.clearCellPositions();\n\n            }\n\n            this.state = {images: noCacheList(props.list)};\n        }\n    }\n\n    componentWillUpdate(nextProps, nextState, nextContext) {\n        cache.clearAll();\n       // cellPositioner.reset(cellPositionerConfig);\n        this.masonryRef.clearCellPositions();\n        this.state = {images: noCacheList(nextProps.list)};\n    }\n\n\n    setMasonry = node => (this.masonryRef = node);\n\n    render() {\n        return (\n                        <ImageMeasurer\n                            items={this.props.list}\n                            image={item => item.image}\n                            keyMapper={keyMapper}\n                            onError={(error, item, src) => {\n                                console.error(\n                                    \"Cannot load image\",\n                                    src,\n                                    \"for item\",\n                                    item,\n                                    \"error\",\n                                    error\n                                );\n                            }}\n                            defaultHeight={defaultHeight}\n                            defaultWidth={defaultWidth}\n                        >\n                            {({ itemsWithSizes, sizes }) => (\n                                <MasonryComponent\n                                    width={this.props.width}\n                                    setRef={this.setMasonry}\n                                    itemsWithSizes={itemsWithSizes}\n                                />\n                            )}\n                        </ImageMeasurer>\n                        );\n    }\n}\n\nexport default Index;"]},"metadata":{},"sourceType":"module"}