{"ast":null,"code":"import _objectSpread from \"/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/src/MasonryProvider.js\";\nimport Immutable from 'immutable';\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { Masonry, createCellPositioner } from 'react-virtualized/dist/commonjs/Masonry';\nimport { WindowScroller } from 'react-virtualized/dist/commonjs/WindowScroller';\nimport { AutoSizer } from 'react-virtualized/dist/commonjs/AutoSizer';\nimport { CellMeasurer, CellMeasurerCache } from 'react-virtualized/dist/commonjs/CellMeasurer';\nimport { ContentBox, ContentBoxHeader, ContentBoxParagraph, LabeledInput, InputRow } from 'react-virtualized/dist/commonjs/utils';\nimport 'react-virtualized/styles.css';\n\nvar GridExample =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(GridExample, _React$PureComponent);\n\n  function GridExample(props, context) {\n    var _this;\n\n    _classCallCheck(this, GridExample);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GridExample).call(this, props, context));\n\n    _this._resetList = function () {\n      var ROW_HEIGHTS = [25, 50, 75, 100];\n      var list = _this.context.list;\n      list.forEach(function (datum) {\n        datum.size = ROW_HEIGHTS[Math.floor(Math.random() * ROW_HEIGHTS.length)];\n      });\n\n      _this._cache.clearAll();\n\n      _this._resetCellPositioner();\n\n      _this._masonry.clearCellPositions();\n    };\n\n    _this._columnCount = 0;\n    _this._cache = new CellMeasurerCache({\n      defaultHeight: 250,\n      defaultWidth: 200,\n      fixedWidth: true\n    });\n    _this.state = {\n      columnWidth: 200,\n      height: 300,\n      gutterSize: 10,\n      overscanByPixels: 0,\n      windowScrollerEnabled: false\n    };\n    _this._cellRenderer = _this._cellRenderer.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this._onResize = _this._onResize.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this._renderAutoSizer = _this._renderAutoSizer.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this._renderMasonry = _this._renderMasonry.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this._setMasonryRef = _this._setMasonryRef.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(GridExample, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          columnWidth = _this$state.columnWidth,\n          height = _this$state.height,\n          gutterSize = _this$state.gutterSize,\n          overscanByPixels = _this$state.overscanByPixels,\n          windowScrollerEnabled = _this$state.windowScrollerEnabled;\n      var child;\n\n      if (windowScrollerEnabled) {\n        child = React.createElement(WindowScroller, {\n          overscanByPixels: overscanByPixels,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }, this._renderAutoSizer);\n      } else {\n        child = this._renderAutoSizer({\n          height: height\n        });\n      }\n\n      return React.createElement(ContentBox, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(ContentBoxHeader, {\n        text: \"Masonry\",\n        sourceLink: \"https://github.com/bvaughn/react-virtualized/blob/master/source/Masonry/Masonry.example.js\",\n        docsLink: \"https://github.com/bvaughn/react-virtualized/blob/master/docs/Masonry.md\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }), React.createElement(ContentBoxParagraph, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, \"Optimized for masonry layouts. Cells are j.i.t. measured and layed out as a user scrolls. Sizes are cached so that resize/reflow is fast and does not require re-measuring.\"), React.createElement(ContentBoxParagraph, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: styles.checkboxLabel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        \"aria-label\": \"Use WindowScroller?\",\n        checked: windowScrollerEnabled,\n        className: styles.checkbox,\n        type: \"checkbox\",\n        onChange: function onChange(event) {\n          // HACK Because this demo switches between using WindowScroller and not,\n          // It's easier to clear the cache when toggling modes to avoid a partially stale state.\n          _this2._cache.clearAll();\n\n          _this2.setState({\n            windowScrollerEnabled: event.target.checked\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }), \"Use \", React.createElement(\"code\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, \"WindowScroller\"), \"?\"), React.createElement(\"label\", {\n        className: styles.checkboxLabel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this._resetList,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, \"Reset List Data\"))), React.createElement(InputRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(LabeledInput, {\n        label: \"Height\",\n        name: \"height\",\n        onChange: function onChange(event) {\n          _this2.setState({\n            height: parseInt(event.target.value, 10) || 300\n          });\n        },\n        value: height,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }), React.createElement(LabeledInput, {\n        label: \"Column Width\",\n        name: \"columnWidth\",\n        onChange: function onChange(event) {\n          _this2._cache.clearAll();\n\n          _this2.setState({\n            columnWidth: parseInt(event.target.value, 10) || 200\n          }, function () {\n            _this2._calculateColumnCount();\n\n            _this2._resetCellPositioner();\n\n            _this2._masonry.clearCellPositions();\n          });\n        },\n        value: columnWidth,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }), React.createElement(LabeledInput, {\n        label: \"Gutter Size\",\n        name: \"gutterSize\",\n        onChange: function onChange(event) {\n          _this2.setState({\n            gutterSize: parseInt(event.target.value, 10) || 10\n          }, function () {\n            _this2._calculateColumnCount();\n\n            _this2._resetCellPositioner();\n\n            _this2._masonry.recomputeCellPositions();\n          });\n        },\n        value: gutterSize,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }), React.createElement(LabeledInput, {\n        label: \"Overscan (px)\",\n        name: \"overscanByPixels\",\n        onChange: function onChange(event) {\n          _this2.setState({\n            overscanByPixels: parseInt(event.target.value, 10) || 0\n          });\n        },\n        value: overscanByPixels,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      })), child);\n    }\n  }, {\n    key: \"_calculateColumnCount\",\n    value: function _calculateColumnCount() {\n      var _this$state2 = this.state,\n          columnWidth = _this$state2.columnWidth,\n          gutterSize = _this$state2.gutterSize;\n      this._columnCount = Math.floor(this._width / (columnWidth + gutterSize));\n    }\n  }, {\n    key: \"_cellRenderer\",\n    value: function _cellRenderer(_ref) {\n      var index = _ref.index,\n          key = _ref.key,\n          parent = _ref.parent,\n          style = _ref.style;\n      var list = this.context.list;\n      var columnWidth = this.state.columnWidth;\n      var datum = list.get(index % list.size);\n      return React.createElement(CellMeasurer, {\n        cache: this._cache,\n        index: index,\n        key: key,\n        parent: parent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: styles.Cell,\n        style: _objectSpread({}, style, {\n          width: columnWidth\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: {\n          backgroundColor: datum.color,\n          borderRadius: '0.5rem',\n          height: datum.size * 3,\n          marginBottom: '0.5rem',\n          width: '100%',\n          fontSize: 20,\n          color: 'white',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, index), datum.random));\n    }\n  }, {\n    key: \"_initCellPositioner\",\n    value: function _initCellPositioner() {\n      if (typeof this._cellPositioner === 'undefined') {\n        var _this$state3 = this.state,\n            columnWidth = _this$state3.columnWidth,\n            gutterSize = _this$state3.gutterSize;\n        this._cellPositioner = createCellPositioner({\n          cellMeasurerCache: this._cache,\n          columnCount: this._columnCount,\n          columnWidth: columnWidth,\n          spacer: gutterSize\n        });\n      }\n    }\n  }, {\n    key: \"_onResize\",\n    value: function _onResize(_ref2) {\n      var width = _ref2.width;\n      this._width = width;\n\n      this._calculateColumnCount();\n\n      this._resetCellPositioner();\n\n      this._masonry.recomputeCellPositions();\n    }\n  }, {\n    key: \"_renderAutoSizer\",\n    value: function _renderAutoSizer(_ref3) {\n      var height = _ref3.height,\n          scrollTop = _ref3.scrollTop;\n      this._height = height;\n      this._scrollTop = scrollTop;\n      var overscanByPixels = this.state.overscanByPixels;\n      return React.createElement(AutoSizer, {\n        disableHeight: true,\n        height: height,\n        onResize: this._onResize,\n        overscanByPixels: overscanByPixels,\n        scrollTop: this._scrollTop,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }, this._renderMasonry);\n    }\n  }, {\n    key: \"_renderMasonry\",\n    value: function _renderMasonry(_ref4) {\n      var width = _ref4.width;\n      this._width = width;\n\n      this._calculateColumnCount();\n\n      this._initCellPositioner();\n\n      var _this$state4 = this.state,\n          height = _this$state4.height,\n          overscanByPixels = _this$state4.overscanByPixels,\n          windowScrollerEnabled = _this$state4.windowScrollerEnabled;\n      return React.createElement(Masonry, {\n        autoHeight: windowScrollerEnabled,\n        cellCount: 1000,\n        cellMeasurerCache: this._cache,\n        cellPositioner: this._cellPositioner,\n        cellRenderer: this._cellRenderer,\n        height: windowScrollerEnabled ? this._height : height,\n        overscanByPixels: overscanByPixels,\n        ref: this._setMasonryRef,\n        scrollTop: this._scrollTop,\n        width: width,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274\n        },\n        __self: this\n      });\n    } // This is a bit of a hack to simulate newly loaded cells\n\n  }, {\n    key: \"_resetCellPositioner\",\n    value: function _resetCellPositioner() {\n      var _this$state5 = this.state,\n          columnWidth = _this$state5.columnWidth,\n          gutterSize = _this$state5.gutterSize;\n\n      this._cellPositioner.reset({\n        columnCount: this._columnCount,\n        columnWidth: columnWidth,\n        spacer: gutterSize\n      });\n    }\n  }, {\n    key: \"_setMasonryRef\",\n    value: function _setMasonryRef(ref) {\n      this._masonry = ref;\n    }\n  }]);\n\n  return GridExample;\n}(React.PureComponent);\n\nGridExample.contextTypes = {\n  list: PropTypes.instanceOf(Immutable.List).isRequired\n};\nexport { GridExample as default };","map":{"version":3,"sources":["/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/src/MasonryProvider.js"],"names":["Immutable","PropTypes","React","Masonry","createCellPositioner","WindowScroller","AutoSizer","CellMeasurer","CellMeasurerCache","ContentBox","ContentBoxHeader","ContentBoxParagraph","LabeledInput","InputRow","GridExample","props","context","_resetList","ROW_HEIGHTS","list","forEach","datum","size","Math","floor","random","length","_cache","clearAll","_resetCellPositioner","_masonry","clearCellPositions","_columnCount","defaultHeight","defaultWidth","fixedWidth","state","columnWidth","height","gutterSize","overscanByPixels","windowScrollerEnabled","_cellRenderer","bind","_onResize","_renderAutoSizer","_renderMasonry","_setMasonryRef","child","styles","checkboxLabel","checkbox","event","setState","target","checked","parseInt","value","_calculateColumnCount","recomputeCellPositions","_width","index","key","parent","style","get","Cell","width","backgroundColor","color","borderRadius","marginBottom","fontSize","display","alignItems","justifyContent","_cellPositioner","cellMeasurerCache","columnCount","spacer","scrollTop","_height","_scrollTop","_initCellPositioner","reset","ref","PureComponent","contextTypes","instanceOf","List","isRequired"],"mappings":"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","sourcesContent":["import Immutable from 'immutable';\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\nimport {\n    Masonry,\n    createCellPositioner} from 'react-virtualized/dist/commonjs/Masonry'\n\nimport {\n    WindowScroller,\n} from 'react-virtualized/dist/commonjs/WindowScroller'\n\nimport {\n    AutoSizer,\n} from 'react-virtualized/dist/commonjs/AutoSizer'\n\nimport {\n    CellMeasurer,\n    CellMeasurerCache,\n} from 'react-virtualized/dist/commonjs/CellMeasurer'\n\nimport {\n    ContentBox,\n    ContentBoxHeader,\n    ContentBoxParagraph,\n    LabeledInput,\n    InputRow,\n} from 'react-virtualized/dist/commonjs/utils'\n\n\n\nimport 'react-virtualized/styles.css'\n\nexport default class GridExample extends React.PureComponent {\n    static contextTypes = {\n        list: PropTypes.instanceOf(Immutable.List).isRequired,\n    };\n\n    constructor(props, context) {\n        super(props, context);\n\n        this._columnCount = 0;\n\n        this._cache = new CellMeasurerCache({\n            defaultHeight: 250,\n            defaultWidth: 200,\n            fixedWidth: true,\n        });\n\n        this.state = {\n            columnWidth: 200,\n            height: 300,\n            gutterSize: 10,\n            overscanByPixels: 0,\n            windowScrollerEnabled: false,\n        };\n\n        this._cellRenderer = this._cellRenderer.bind(this);\n        this._onResize = this._onResize.bind(this);\n        this._renderAutoSizer = this._renderAutoSizer.bind(this);\n        this._renderMasonry = this._renderMasonry.bind(this);\n        this._setMasonryRef = this._setMasonryRef.bind(this);\n    }\n\n    render() {\n        const {\n            columnWidth,\n            height,\n            gutterSize,\n            overscanByPixels,\n            windowScrollerEnabled,\n        } = this.state;\n\n        let child;\n\n        if (windowScrollerEnabled) {\n            child = (\n                <WindowScroller overscanByPixels={overscanByPixels}>\n                {this._renderAutoSizer}\n                </WindowScroller>\n        );\n        } else {\n            child = this._renderAutoSizer({height});\n        }\n\n        return (\n            <ContentBox>\n            <ContentBoxHeader\n        text=\"Masonry\"\n        sourceLink=\"https://github.com/bvaughn/react-virtualized/blob/master/source/Masonry/Masonry.example.js\"\n        docsLink=\"https://github.com/bvaughn/react-virtualized/blob/master/docs/Masonry.md\"\n            />\n\n            <ContentBoxParagraph>\n            Optimized for masonry layouts. Cells are j.i.t. measured and layed out\n        as a user scrolls. Sizes are cached so that resize/reflow is fast and\n        does not require re-measuring.\n        </ContentBoxParagraph>\n\n        <ContentBoxParagraph>\n        <label className={styles.checkboxLabel}>\n            <input\n        aria-label=\"Use WindowScroller?\"\n        checked={windowScrollerEnabled}\n        className={styles.checkbox}\n        type=\"checkbox\"\n        onChange={event => {\n            // HACK Because this demo switches between using WindowScroller and not,\n            // It's easier to clear the cache when toggling modes to avoid a partially stale state.\n            this._cache.clearAll();\n            this.setState({\n                windowScrollerEnabled: event.target.checked,\n            });\n        }}\n        />\n        Use <code>WindowScroller</code>?\n        </label>\n        <label className={styles.checkboxLabel}>\n            <button onClick={this._resetList}>Reset List Data</button>\n        </label>\n        </ContentBoxParagraph>\n\n        <InputRow>\n        <LabeledInput\n        label=\"Height\"\n        name=\"height\"\n        onChange={event => {\n            this.setState({\n                height: parseInt(event.target.value, 10) || 300,\n            });\n        }}\n        value={height}\n        />\n        <LabeledInput\n        label=\"Column Width\"\n        name=\"columnWidth\"\n        onChange={event => {\n            this._cache.clearAll();\n            this.setState(\n                {\n                    columnWidth: parseInt(event.target.value, 10) || 200,\n                },\n                () => {\n                    this._calculateColumnCount();\n                    this._resetCellPositioner();\n                    this._masonry.clearCellPositions();\n                },\n            );\n        }}\n        value={columnWidth}\n        />\n        <LabeledInput\n        label=\"Gutter Size\"\n        name=\"gutterSize\"\n        onChange={event => {\n            this.setState(\n                {\n                    gutterSize: parseInt(event.target.value, 10) || 10,\n                },\n                () => {\n                    this._calculateColumnCount();\n                    this._resetCellPositioner();\n                    this._masonry.recomputeCellPositions();\n                },\n            );\n        }}\n        value={gutterSize}\n        />\n        <LabeledInput\n        label=\"Overscan (px)\"\n        name=\"overscanByPixels\"\n        onChange={event => {\n            this.setState({\n                overscanByPixels: parseInt(event.target.value, 10) || 0,\n            });\n        }}\n        value={overscanByPixels}\n        />\n        </InputRow>\n\n        {child}\n    </ContentBox>\n    );\n    }\n\n    _calculateColumnCount() {\n        const {columnWidth, gutterSize} = this.state;\n\n        this._columnCount = Math.floor(this._width / (columnWidth + gutterSize));\n    }\n\n    _cellRenderer({index, key, parent, style}) {\n        const {list} = this.context;\n        const {columnWidth} = this.state;\n\n        const datum = list.get(index % list.size);\n\n        return (\n            <CellMeasurer cache={this._cache} index={index} key={key} parent={parent}>\n            <div\n        className={styles.Cell}\n        style={{\n        ...style,\n                width: columnWidth,\n        }}>\n    <div\n        style={{\n            backgroundColor: datum.color,\n                borderRadius: '0.5rem',\n                height: datum.size * 3,\n                marginBottom: '0.5rem',\n                width: '100%',\n                fontSize: 20,\n                color: 'white',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n        }}>\n        {index}\n    </div>\n        {datum.random}\n    </div>\n        </CellMeasurer>\n    );\n    }\n\n    _initCellPositioner() {\n        if (typeof this._cellPositioner === 'undefined') {\n            const {columnWidth, gutterSize} = this.state;\n\n            this._cellPositioner = createCellPositioner({\n                cellMeasurerCache: this._cache,\n                columnCount: this._columnCount,\n                columnWidth,\n                spacer: gutterSize,\n            });\n        }\n    }\n\n    _onResize({width}) {\n        this._width = width;\n\n        this._calculateColumnCount();\n        this._resetCellPositioner();\n        this._masonry.recomputeCellPositions();\n    }\n\n    _renderAutoSizer({height, scrollTop}) {\n        this._height = height;\n        this._scrollTop = scrollTop;\n\n        const {overscanByPixels} = this.state;\n\n        return (\n            <AutoSizer\n        disableHeight\n        height={height}\n        onResize={this._onResize}\n        overscanByPixels={overscanByPixels}\n        scrollTop={this._scrollTop}>\n            {this._renderMasonry}\n            </AutoSizer>\n    );\n    }\n\n    _renderMasonry({width}) {\n        this._width = width;\n\n        this._calculateColumnCount();\n        this._initCellPositioner();\n\n        const {height, overscanByPixels, windowScrollerEnabled} = this.state;\n\n        return (\n            <Masonry\n        autoHeight={windowScrollerEnabled}\n        cellCount={1000}\n        cellMeasurerCache={this._cache}\n        cellPositioner={this._cellPositioner}\n        cellRenderer={this._cellRenderer}\n        height={windowScrollerEnabled ? this._height : height}\n        overscanByPixels={overscanByPixels}\n        ref={this._setMasonryRef}\n        scrollTop={this._scrollTop}\n        width={width}\n        />\n    );\n    }\n\n    // This is a bit of a hack to simulate newly loaded cells\n    _resetList = () => {\n        const ROW_HEIGHTS = [25, 50, 75, 100];\n\n        const {list} = this.context;\n        list.forEach(datum => {\n            datum.size = ROW_HEIGHTS[Math.floor(Math.random() * ROW_HEIGHTS.length)];\n        });\n\n        this._cache.clearAll();\n        this._resetCellPositioner();\n        this._masonry.clearCellPositions();\n    };\n\n    _resetCellPositioner() {\n        const {columnWidth, gutterSize} = this.state;\n\n        this._cellPositioner.reset({\n            columnCount: this._columnCount,\n            columnWidth,\n            spacer: gutterSize,\n        });\n    }\n\n    _setMasonryRef(ref) {\n        this._masonry = ref;\n    }\n}"]},"metadata":{},"sourceType":"module"}