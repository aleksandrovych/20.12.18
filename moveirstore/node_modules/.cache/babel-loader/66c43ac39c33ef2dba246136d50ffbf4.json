{"ast":null,"code":"import _toConsumableArray from \"/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _objectSpread from \"/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/src/MasonryProvider.js\";\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport { CellMeasurer, CellMeasurerCache, createMasonryCellPositioner, Masonry } from \"react-virtualized\";\nimport ImageMeasurer from \"react-virtualized-image-measurer\";\nimport list from \"./data\";\nimport { Link } from 'react-router-dom'; // Array of images with captions\n//const list = [{image: 'http://...', title: 'Foo'}];\n// We need to make sure images are loaded from scratch every time for this demo\n\nvar noCacheList = function noCacheList(list) {\n  return list.map(function (item, index) {\n    return {\n      title: index + \". \" + item.title,\n      image: item.image + (item.image ? \"?noCache=\" + Math.random() : \"\")\n    };\n  });\n};\n\nvar keyMapper = function keyMapper(item, index) {\n  return item.image || index;\n};\n\nvar columnWidth = 250;\nvar defaultHeight = 540;\nvar defaultWidth = columnWidth;\nvar defaultSpacer = 30;\nvar imageHeight = 380; // Default sizes help Masonry decide how many images to batch-measure\n\nvar cache = new CellMeasurerCache({\n  defaultHeight: defaultHeight,\n  defaultWidth: defaultWidth,\n  fixedWidth: true\n}); // Our masonry layout will use 3 columns with a 10px gutter between\n\nvar cellPositionerConfig = {\n  cellMeasurerCache: cache,\n  columnCount: 4,\n  columnWidth: columnWidth,\n  spacer: defaultSpacer\n};\nvar cellPositioner = createMasonryCellPositioner(cellPositionerConfig);\n\nvar MasonryComponent = function MasonryComponent(_ref) {\n  var itemsWithSizes = _ref.itemsWithSizes;\n\n  function cellRenderer(_ref2) {\n    var index = _ref2.index,\n        key = _ref2.key,\n        parent = _ref2.parent,\n        style = _ref2.style;\n    var _itemsWithSizes$index = itemsWithSizes[index],\n        item = _itemsWithSizes$index.item,\n        size = _itemsWithSizes$index.size;\n    var height = columnWidth * (size.height / size.width) || defaultHeight;\n    return React.createElement(CellMeasurer, {\n      cache: cache,\n      index: index,\n      key: key,\n      parent: parent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: _objectSpread({}, style, {\n        border: \"2px double grey\"\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, item.title), item.image && React.createElement(\"img\", {\n      src: item.image,\n      alt: item.title,\n      style: {\n        height: height,\n        width: columnWidth,\n        objectFit: \"contain\",\n        display: \"block\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    })));\n  }\n\n  return React.createElement(Masonry, {\n    cellCount: itemsWithSizes.length,\n    cellMeasurerCache: cache,\n    cellPositioner: cellPositioner,\n    cellRenderer: cellRenderer,\n    height: defaultHeight * 5 + defaultSpacer * 4,\n    width: 1100,\n    keyMapper: keyMapper,\n    ref: setRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  });\n};\n\nvar Index =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Index, _React$Component);\n\n  function Index(props) {\n    var _this;\n\n    _classCallCheck(this, Index);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Index).call(this, props));\n    _this.masonryRef = null;\n\n    _this.shorten = function () {\n      cache.clearAll();\n      cellPositioner.reset(cellPositionerConfig);\n\n      _this.masonryRef.clearCellPositions();\n\n      _this.setState({\n        images: _toConsumableArray(_this.state.images.slice(1))\n      });\n    };\n\n    _this.setMasonry = function (node) {\n      return _this.masonryRef = node;\n    };\n\n    state = {\n      images: noCacheList(props.list)\n    };\n    return _this;\n  } // this shows how to significantly change the input array, if items will be only appended this recalculation is not needed\n\n\n  _createClass(Index, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return;\n      React.createElement(ImageMeasurer, {\n        items: this.state.images,\n        image: function image(item) {\n          return item.image;\n        },\n        keyMapper: keyMapper,\n        onError: function onError(error, item, src) {\n          console.error(\"Cannot load image\", src, \"for item\", item, \"error\", error);\n        },\n        defaultHeight: defaultHeight,\n        defaultWidth: defaultWidth,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, function (_ref3) {\n        var itemsWithSizes = _ref3.itemsWithSizes;\n        return React.createElement(MasonryComponent, {\n          setRef: _this2.setMasonry,\n          itemsWithSizes: itemsWithSizes,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120\n          },\n          __self: this\n        });\n      });\n    }\n  }]);\n\n  return Index;\n}(React.Component);\n\nexport default Index;","map":{"version":3,"sources":["/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/src/MasonryProvider.js"],"names":["React","render","CellMeasurer","CellMeasurerCache","createMasonryCellPositioner","Masonry","ImageMeasurer","list","Link","noCacheList","map","item","index","title","image","Math","random","keyMapper","columnWidth","defaultHeight","defaultWidth","defaultSpacer","imageHeight","cache","fixedWidth","cellPositionerConfig","cellMeasurerCache","columnCount","spacer","cellPositioner","MasonryComponent","itemsWithSizes","cellRenderer","key","parent","style","size","height","width","border","objectFit","display","length","setRef","Index","props","masonryRef","shorten","clearAll","reset","clearCellPositions","setState","images","state","slice","setMasonry","node","error","src","console","Component"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SACIC,YADJ,EAEIC,iBAFJ,EAGIC,2BAHJ,EAIIC,OAJJ,QAKO,mBALP;AAMA,OAAOC,aAAP,MAA0B,kCAA1B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,IAAT,QAAqB,kBAArB,C,CAEA;AACA;AAEA;;AACA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAF,IAAI;AAAA,SAAIA,IAAI,CAACG,GAAL,CAAS,UAACC,IAAD,EAAOC,KAAP;AAAA,WAAkB;AACnDC,MAAAA,KAAK,EAAED,KAAK,GAAG,IAAR,GAAeD,IAAI,CAACE,KADwB;AAEnDC,MAAAA,KAAK,EAAEH,IAAI,CAACG,KAAL,IAAcH,IAAI,CAACG,KAAL,GAAa,cAAcC,IAAI,CAACC,MAAL,EAA3B,GAA2C,EAAzD;AAF4C,KAAlB;AAAA,GAAT,CAAJ;AAAA,CAAxB;;AAKA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACN,IAAD,EAAOC,KAAP;AAAA,SAAiBD,IAAI,CAACG,KAAL,IAAcF,KAA/B;AAAA,CAAlB;;AAEA,IAAMM,WAAW,GAAG,GAApB;AACA,IAAMC,aAAa,GAAG,GAAtB;AACA,IAAMC,YAAY,GAAGF,WAArB;AACA,IAAMG,aAAa,GAAG,EAAtB;AACA,IAAMC,WAAW,GAAG,GAApB,C,CAEA;;AACA,IAAMC,KAAK,GAAG,IAAIpB,iBAAJ,CAAsB;AAChCgB,EAAAA,aAAa,EAAbA,aADgC;AAEhCC,EAAAA,YAAY,EAAZA,YAFgC;AAGhCI,EAAAA,UAAU,EAAE;AAHoB,CAAtB,CAAd,C,CAMA;;AACA,IAAMC,oBAAoB,GAAG;AACzBC,EAAAA,iBAAiB,EAAEH,KADM;AAEzBI,EAAAA,WAAW,EAAE,CAFY;AAGzBT,EAAAA,WAAW,EAAXA,WAHyB;AAIzBU,EAAAA,MAAM,EAAEP;AAJiB,CAA7B;AAOA,IAAMQ,cAAc,GAAGzB,2BAA2B,CAACqB,oBAAD,CAAlD;;AAEA,IAAMK,gBAAgB,GAAG,SAAnBA,gBAAmB,OAAwB;AAAA,MAArBC,cAAqB,QAArBA,cAAqB;;AAE7C,WAASC,YAAT,QAAqD;AAAA,QAA7BpB,KAA6B,SAA7BA,KAA6B;AAAA,QAAtBqB,GAAsB,SAAtBA,GAAsB;AAAA,QAAjBC,MAAiB,SAAjBA,MAAiB;AAAA,QAATC,KAAS,SAATA,KAAS;AAAA,gCAC1BJ,cAAc,CAACnB,KAAD,CADY;AAAA,QACzCD,IADyC,yBACzCA,IADyC;AAAA,QACnCyB,IADmC,yBACnCA,IADmC;AAEjD,QAAMC,MAAM,GAAGnB,WAAW,IAAIkB,IAAI,CAACC,MAAL,GAAcD,IAAI,CAACE,KAAvB,CAAX,IAA4CnB,aAA3D;AAEA,WACI,oBAAC,YAAD;AACJ,MAAA,KAAK,EAAEI,KADH;AAEJ,MAAA,KAAK,EAAEX,KAFH;AAGJ,MAAA,GAAG,EAAEqB,GAHD;AAIJ,MAAA,MAAM,EAAEC,MAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKA;AAAK,MAAA,KAAK,oBAAMC,KAAN,EAAgB;AAACI,QAAAA,MAAM,EAAE;AAAT,OAAhB,CAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM5B,IAAI,CAACE,KAAX,CADQ,EAEHF,IAAI,CAACG,KAAL,IACD;AACI,MAAA,GAAG,EAAEH,IAAI,CAACG,KADd;AAEI,MAAA,GAAG,EAAEH,IAAI,CAACE,KAFd;AAGI,MAAA,KAAK,EAAE;AACPwB,QAAAA,MAAM,EAAEA,MADD;AAEHC,QAAAA,KAAK,EAAEpB,WAFJ;AAGHsB,QAAAA,SAAS,EAAE,SAHR;AAIHC,QAAAA,OAAO,EAAE;AAJN,OAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHI,CALA,CADJ;AAuBH;;AAED,SACI,oBAAC,OAAD;AACJ,IAAA,SAAS,EAAIV,cAAc,CAACW,MADxB;AAEJ,IAAA,iBAAiB,EAAInB,KAFjB;AAGJ,IAAA,cAAc,EAAIM,cAHd;AAIJ,IAAA,YAAY,EAAIG,YAJZ;AAKJ,IAAA,MAAM,EAAIb,aAAa,GAAG,CAAhB,GAAoBE,aAAa,GAAG,CAL1C;AAMJ,IAAA,KAAK,EAAI,IANL;AAOJ,IAAA,SAAS,EAAIJ,SAPT;AAQJ,IAAA,GAAG,EAAI0B,MARH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAYH,CA3CD;;IA6CMC,K;;;;;AAIF,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,+EAAMA,KAAN;AADe,UAFnBC,UAEmB,GAFN,IAEM;;AAAA,UAMnBC,OANmB,GAMT,YAAM;AACZxB,MAAAA,KAAK,CAACyB,QAAN;AACAnB,MAAAA,cAAc,CAACoB,KAAf,CAAqBxB,oBAArB;;AACA,YAAKqB,UAAL,CAAgBI,kBAAhB;;AACA,YAAKC,QAAL,CAAc;AAAEC,QAAAA,MAAM,qBAAM,MAAKC,KAAL,CAAWD,MAAX,CAAkBE,KAAlB,CAAwB,CAAxB,CAAN;AAAR,OAAd;AACH,KAXkB;;AAAA,UAanBC,UAbmB,GAaN,UAAAC,IAAI;AAAA,aAAK,MAAKV,UAAL,GAAkBU,IAAvB;AAAA,KAbE;;AAEfH,IAAAA,KAAK,GAAG;AAACD,MAAAA,MAAM,EAAE3C,WAAW,CAACoC,KAAK,CAACtC,IAAP;AAApB,KAAR;AAFe;AAGlB,G,CAED;;;;;6BAUQ;AAAA;;AACJ;AACI,0BAAC,aAAD;AACI,QAAA,KAAK,EAAE,KAAK8C,KAAL,CAAWD,MADtB;AAEI,QAAA,KAAK,EAAE,eAAAzC,IAAI;AAAA,iBAAIA,IAAI,CAACG,KAAT;AAAA,SAFf;AAGI,QAAA,SAAS,EAAEG,SAHf;AAII,QAAA,OAAO,EAAE,iBAACwC,KAAD,EAAQ9C,IAAR,EAAc+C,GAAd,EAAsB;AAAEC,UAAAA,OAAO,CAACF,KAAR,CAAc,mBAAd,EAAmCC,GAAnC,EAAwC,UAAxC,EAAoD/C,IAApD,EAA0D,OAA1D,EAAmE8C,KAAnE;AAA0E,SAJ/G;AAKI,QAAA,aAAa,EAAEtC,aALnB;AAMI,QAAA,YAAY,EAAEC,YANlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOS;AAAA,YAAGW,cAAH,SAAGA,cAAH;AAAA,eAAyB,oBAAC,gBAAD;AAAkB,UAAA,MAAM,EAAE,MAAI,CAACwB,UAA/B;AAA2C,UAAA,cAAc,EAAExB,cAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAzB;AAAA,OAPT;AASP;;;;EA9Be/B,KAAK,CAAC4D,S;;AAiC1B,eAAehB,KAAf","sourcesContent":["import React from \"react\";\nimport { render } from \"react-dom\";\nimport {\n    CellMeasurer,\n    CellMeasurerCache,\n    createMasonryCellPositioner,\n    Masonry\n} from \"react-virtualized\";\nimport ImageMeasurer from \"react-virtualized-image-measurer\";\nimport list from \"./data\";\nimport { Link } from 'react-router-dom'\n\n// Array of images with captions\n//const list = [{image: 'http://...', title: 'Foo'}];\n\n// We need to make sure images are loaded from scratch every time for this demo\nconst noCacheList = list => list.map((item, index) => ({\n    title: index + \". \" + item.title,\n    image: item.image + (item.image ? \"?noCache=\" + Math.random() : \"\")\n}));\n\nconst keyMapper = (item, index) => item.image || index;\n\nconst columnWidth = 250;\nconst defaultHeight = 540;\nconst defaultWidth = columnWidth;\nconst defaultSpacer = 30;\nconst imageHeight = 380;\n\n// Default sizes help Masonry decide how many images to batch-measure\nconst cache = new CellMeasurerCache({\n    defaultHeight,\n    defaultWidth,\n    fixedWidth: true\n});\n\n// Our masonry layout will use 3 columns with a 10px gutter between\nconst cellPositionerConfig = {\n    cellMeasurerCache: cache,\n    columnCount: 4,\n    columnWidth,\n    spacer: defaultSpacer\n};\n\nconst cellPositioner = createMasonryCellPositioner(cellPositionerConfig);\n\nconst MasonryComponent = ({ itemsWithSizes }) => {\n\n    function cellRenderer({ index, key, parent, style }) {\n        const { item, size } = itemsWithSizes[index];\n        const height = columnWidth * (size.height / size.width) || defaultHeight;\n\n        return (\n            <CellMeasurer\n        cache={cache}\n        index={index}\n        key={key}\n        parent={parent} >\n            <div style={{...style, ...{border: \"2px double grey\"}}}>\n    <div>{item.title}</div>\n        {item.image && (\n        <img\n            src={item.image}\n            alt={item.title}\n            style={{\n            height: height,\n                width: columnWidth,\n                objectFit: \"contain\",\n                display: \"block\"\n        }}\n            />\n        )}\n    </div>\n        </CellMeasurer>\n    );\n    }\n\n    return (\n        <Masonry\n    cellCount = {itemsWithSizes.length}\n    cellMeasurerCache = {cache}\n    cellPositioner = {cellPositioner}\n    cellRenderer = {cellRenderer}\n    height = {defaultHeight * 5 + defaultSpacer * 4}\n    width = {1100}\n    keyMapper = {keyMapper}\n    ref = {setRef}\n    />\n);\n};\n\nclass Index extends React.Component {\n\n    masonryRef = null;\n\n    constructor(props) {\n        super(props);\n        state = {images: noCacheList(props.list)}\n    }\n\n    // this shows how to significantly change the input array, if items will be only appended this recalculation is not needed\n    shorten = () => {\n        cache.clearAll();\n        cellPositioner.reset(cellPositionerConfig);\n        this.masonryRef.clearCellPositions();\n        this.setState({ images: [...this.state.images.slice(1)] });\n    };\n\n    setMasonry = node => (this.masonryRef = node);\n\n    render(){\n        return\n            <ImageMeasurer\n                items={this.state.images}\n                image={item => item.image}\n                keyMapper={keyMapper}\n                onError={(error, item, src) => { console.error(\"Cannot load image\", src, \"for item\", item, \"error\", error)}}\n                defaultHeight={defaultHeight}\n                defaultWidth={defaultWidth}>\n                    {({ itemsWithSizes }) => (<MasonryComponent setRef={this.setMasonry} itemsWithSizes={itemsWithSizes}/>)}\n            </ImageMeasurer>\n    }\n}\n\nexport default Index;"]},"metadata":{},"sourceType":"module"}