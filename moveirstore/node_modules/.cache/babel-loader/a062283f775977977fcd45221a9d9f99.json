{"ast":null,"code":"import _toConsumableArray from \"/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/src/MasonryProvider.js\";\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport { CellMeasurer, CellMeasurerCache, createMasonryCellPositioner, Masonry } from \"react-virtualized\";\nimport ImageMeasurer from \"react-virtualized-image-measurer\";\nimport list from \"./data\"; // Array of images with captions\n//const list = [{image: 'http://...', title: 'Foo'}];\n// We need to make sure images are loaded from scratch every time for this demo\n\nvar noCacheList = list.map(function (item, index) {\n  return {\n    title: index + \". \" + item.title,\n    image: item.image + (item.image ? \"?noCache=\" + Math.random() : \"\")\n  };\n});\n\nvar keyMapper = function keyMapper(item, index) {\n  return item.image || index;\n};\n\nvar columnWidth = 250;\nvar defaultHeight = 540;\nvar defaultWidth = columnWidth;\nvar defaultSpacer = 30;\nvar imageHeight = 380; // Default sizes help Masonry decide how many images to batch-measure\n\nvar cache = new CellMeasurerCache({\n  defaultHeight: defaultHeight,\n  defaultWidth: defaultWidth,\n  fixedWidth: true\n}); // Our masonry layout will use 3 columns with a 10px gutter between\n\nvar cellPositionerConfig = {\n  cellMeasurerCache: cache,\n  columnCount: 4,\n  columnWidth: columnWidth,\n  spacer: defaultSpacer\n};\nvar cellPositioner = createMasonryCellPositioner(cellPositionerConfig);\n\nvar MasonryComponent = function MasonryComponent(_ref) {\n  var itemsWithSizes = _ref.itemsWithSizes,\n      setRef = _ref.setRef;\n\n  var cellRenderer = function cellRenderer(_ref2) {\n    var index = _ref2.index,\n        key = _ref2.key,\n        parent = _ref2.parent,\n        style = _ref2.style;\n    var _itemsWithSizes$index = itemsWithSizes[index],\n        item = _itemsWithSizes$index.item,\n        size = _itemsWithSizes$index.size;\n    var height = imageHeight;\n    return React.createElement(CellMeasurer, {\n      cache: cache,\n      index: index,\n      key: key,\n      parent: parent,\n      style: {\n        borderWidth: \"1px\",\n        borderColor: \"black\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: style,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, item.title), item.image && React.createElement(\"img\", {\n      src: item.image,\n      alt: item.title,\n      style: {\n        height: height,\n        width: columnWidth,\n        objectFit: \"contain\",\n        display: \"block\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    })));\n  };\n\n  return React.createElement(Masonry, {\n    cellCount: itemsWithSizes.length,\n    cellMeasurerCache: cache,\n    cellPositioner: cellPositioner,\n    cellRenderer: cellRenderer,\n    height: defaultHeight * 5 + defaultSpacer * 4,\n    width: 1100,\n    keyMapper: keyMapper,\n    ref: setRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  });\n};\n\nvar Index =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Index, _React$Component);\n\n  function Index() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Index);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Index)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      images: noCacheList\n    };\n    _this.masonryRef = null;\n\n    _this.shorten = function () {\n      cache.clearAll();\n      cellPositioner.reset(cellPositionerConfig);\n\n      _this.masonryRef.clearCellPositions();\n\n      _this.setState({\n        images: _toConsumableArray(_this.state.images.slice(1))\n      });\n    };\n\n    _this.setMasonry = function (node) {\n      return _this.masonryRef = node;\n    };\n\n    return _this;\n  }\n\n  _createClass(Index, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(ImageMeasurer, {\n        items: this.state.images,\n        image: function image(item) {\n          return item.image;\n        },\n        keyMapper: keyMapper,\n        onError: function onError(error, item, src) {\n          console.error(\"Cannot load image\", src, \"for item\", item, \"error\", error);\n        },\n        defaultHeight: defaultHeight,\n        defaultWidth: defaultWidth,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, function (_ref3) {\n        var itemsWithSizes = _ref3.itemsWithSizes;\n        return React.createElement(MasonryComponent, {\n          setRef: _this2.setMasonry,\n          itemsWithSizes: itemsWithSizes,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128\n          },\n          __self: this\n        });\n      }));\n    }\n  }]);\n\n  return Index;\n}(React.Component);\n\nexport default Index;","map":{"version":3,"sources":["/Users/allar-alexeyalexandrovich/20.12.18/moveirstore/src/MasonryProvider.js"],"names":["React","render","CellMeasurer","CellMeasurerCache","createMasonryCellPositioner","Masonry","ImageMeasurer","list","noCacheList","map","item","index","title","image","Math","random","keyMapper","columnWidth","defaultHeight","defaultWidth","defaultSpacer","imageHeight","cache","fixedWidth","cellPositionerConfig","cellMeasurerCache","columnCount","spacer","cellPositioner","MasonryComponent","itemsWithSizes","setRef","cellRenderer","key","parent","style","size","height","borderWidth","borderColor","width","objectFit","display","length","Index","state","images","masonryRef","shorten","clearAll","reset","clearCellPositions","setState","slice","setMasonry","node","error","src","console","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { render } from \"react-dom\";\nimport {\n    CellMeasurer,\n    CellMeasurerCache,\n    createMasonryCellPositioner,\n    Masonry\n} from \"react-virtualized\";\nimport ImageMeasurer from \"react-virtualized-image-measurer\";\nimport list from \"./data\";\n\n// Array of images with captions\n//const list = [{image: 'http://...', title: 'Foo'}];\n\n// We need to make sure images are loaded from scratch every time for this demo\nconst noCacheList = list.map((item, index) => ({\n    title: index + \". \" + item.title,\n    image: item.image + (item.image ? \"?noCache=\" + Math.random() : \"\")\n}));\n\nconst keyMapper = (item, index) => item.image || index;\n\nconst columnWidth = 250;\nconst defaultHeight = 540;\nconst defaultWidth = columnWidth;\nconst defaultSpacer = 30;\nconst imageHeight = 380;\n\n// Default sizes help Masonry decide how many images to batch-measure\nconst cache = new CellMeasurerCache({\n    defaultHeight,\n    defaultWidth,\n    fixedWidth: true\n});\n\n// Our masonry layout will use 3 columns with a 10px gutter between\nconst cellPositionerConfig = {\n    cellMeasurerCache: cache,\n    columnCount: 4,\n    columnWidth,\n    spacer: defaultSpacer\n};\n\nconst cellPositioner = createMasonryCellPositioner(cellPositionerConfig);\n\nconst MasonryComponent = ({ itemsWithSizes, setRef }) => {\n    const cellRenderer = ({ index, key, parent, style }) => {\n        const { item, size } = itemsWithSizes[index];\n        const height = imageHeight;\n\n        return (\n            <CellMeasurer\n                cache={cache}\n                index={index}\n                key={key}\n                parent={parent}\n                style={{borderWidth: \"1px\", borderColor: \"black\"}}\n            >\n            <div style={style}>\n            <div>{item.title}</div>\n        {item.image && (\n        <img\n            src={item.image}\n            alt={item.title}\n            style={{\n            height: height,\n                width: columnWidth,\n                objectFit: \"contain\",\n                display: \"block\"\n        }}\n            />\n        )}\n    </div>\n        </CellMeasurer>\n    );\n    };\n\n    return (\n        <Masonry\n    cellCount={itemsWithSizes.length}\n    cellMeasurerCache={cache}\n    cellPositioner={cellPositioner}\n    cellRenderer={cellRenderer}\n    height={defaultHeight * 5 + defaultSpacer * 4}\n    width={1100}\n    keyMapper={keyMapper}\n    ref={setRef}\n    />\n);\n};\n\nclass Index extends React.Component {\n    state = { images: noCacheList };\n\n    masonryRef = null;\n\n    // this shows how to significantly change the input array, if items will be only appended this recalculation is not needed\n    shorten = () => {\n        cache.clearAll();\n        cellPositioner.reset(cellPositionerConfig);\n        this.masonryRef.clearCellPositions();\n        this.setState({ images: [...this.state.images.slice(1)] });\n    };\n\n    setMasonry = node => (this.masonryRef = node);\n\n    render() {\n        return (\n            <div>\n            <ImageMeasurer\n        items={this.state.images}\n        image={item => item.image}\n        keyMapper={keyMapper}\n        onError={(error, item, src) => {\n            console.error(\n                \"Cannot load image\",\n                src,\n                \"for item\",\n                item,\n                \"error\",\n                error\n            );\n        }}\n        defaultHeight={defaultHeight}\n        defaultWidth={defaultWidth}\n            >\n            {({ itemsWithSizes }) => (\n        <MasonryComponent\n        setRef={this.setMasonry}\n        itemsWithSizes={itemsWithSizes}\n        />\n    )}\n    </ImageMeasurer>\n        </div>\n    );\n    }\n}\n\nexport default Index;"]},"metadata":{},"sourceType":"module"}